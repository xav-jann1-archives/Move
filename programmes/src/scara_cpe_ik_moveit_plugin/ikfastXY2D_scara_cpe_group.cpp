/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2018-11-09 07:54:14.825139
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5;
x0=IKsin(j[0]);
x1=IKcos(j[1]);
x2=((0.047)*x0);
x3=IKsin(j[1]);
x4=IKcos(j[0]);
x5=((0.047)*x4);
eetrans[0]=(((x3*x5))+(((-1.0)*(1.0)*x1*x2))+(((-1.0)*(0.08)*x0)));
eetrans[1]=((0.048)+(((0.08)*x4))+((x2*x3))+((x1*x5)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 2; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x22000008; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,new_px,px,npx,new_py,py,npy;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1];

new_px=px;
new_py=((-0.048)+py);
px = new_px; py = new_py;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
cj1array[0]=((-1.14481382978723)+(((132.978723404255)*(px*px)))+(((132.978723404255)*(py*py))));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j0eval[3];
IkReal x6=((py*py)+(px*px));
IkReal x7=((0.047)*cj1);
IkReal x8=((0.047)*sj1);
j0eval[0]=x6;
j0eval[1]=((IKabs(((((-1.0)*px*x7))+((py*x8))+(((-1.0)*(0.08)*px)))))+(IKabs(((((0.08)*py))+((py*x7))+((px*x8))))));
j0eval[2]=IKsign(x6);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x9=(px*sj1);
IkReal x10=(cj1*py);
j0eval[0]=((((-1.0)*(1.70212765957447)*py))+x9+(((-1.0)*x10)));
j0eval[1]=((IKabs(((-6.4)+(((-1.0)*(2.209)*(cj1*cj1)))+(((1000.0)*(px*px)))+(((-1.0)*(7.52)*cj1)))))+(IKabs(((((-1.0)*(2.209)*cj1*sj1))+(((-1.0)*(3.76)*sj1))+(((1000.0)*px*py))))));
j0eval[2]=IKsign(((((47.0)*x9))+(((-1.0)*(80.0)*py))+(((-47.0)*x10))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
j0eval[0]=((((-1.0)*(1.0)*py*sj1))+(((-1.0)*(1.70212765957447)*px))+(((-1.0)*(1.0)*cj1*px)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x11=((1.0)*py);
IkReal x12=px*px;
if(((x12+(py*py))) < -0.00001)
continue;
IkReal x13=IKsqrt((x12+(py*py)));
IkReal x14=IKabs(x13);
CheckValue<IkReal> x19=IKPowWithIntegerCheck(x14,-1);
if(!x19.valid){
continue;
}
IkReal x15=x19.value;
IkReal x16=((1.70212765957447)*px*x15);
IkReal x20 = (x12+(py*py));
if(IKabs(x20)==0){
continue;
}
IkReal x17=pow(x20,-0.5);
CheckValue<IkReal> x21=IKPowWithIntegerCheck(x14,-2);
if(!x21.valid){
continue;
}
if((((1.0)+(((-2.89723856948846)*x12*(x21.value))))) < -0.00001)
continue;
IkReal x18=(x17*(IKsqrt(((1.0)+(((-2.89723856948846)*x12*(x21.value)))))));
if( (x16) < -1-IKFAST_SINCOS_THRESH || (x16) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x22 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*px)))),IkReal(((-1.0)*x11)),IKFAST_ATAN2_MAGTHRESH);
if(!x22.valid){
continue;
}
IkReal gconst0=((IKasin(x16))+(((-1.0)*(x22.value))));
IkReal gconst1=(((px*x18))+(((-1.0)*py*x16*x17)));
IkReal gconst2=((((-1.70212765957447)*x12*x15*x17))+(((-1.0)*x11*x18)));
CheckValue<IkReal> x23 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*px)))),IkReal(((-1.0)*(((1.0)*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x23.valid){
continue;
}
if((((py*py)+(px*px))) < -0.00001)
continue;
CheckValue<IkReal> x24=IKPowWithIntegerCheck(IKabs(IKsqrt(((py*py)+(px*px)))),-1);
if(!x24.valid){
continue;
}
if( (((1.70212765957447)*px*(x24.value))) < -1-IKFAST_SINCOS_THRESH || (((1.70212765957447)*px*(x24.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j1+(x23.value)+(((-1.0)*(1.0)*(IKasin(((1.70212765957447)*px*(x24.value)))))))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x25=((1.0)*py);
IkReal x26=px*px;
IkReal x27=x13;
IkReal x28=IKabs(x27);
CheckValue<IkReal> x34=IKPowWithIntegerCheck(x28,-1);
if(!x34.valid){
continue;
}
IkReal x29=x34.value;
IkReal x30=((1.70212765957447)*px*x29);
if( (x30) < -1-IKFAST_SINCOS_THRESH || (x30) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x35 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*px)))),IkReal(((-1.0)*x25)),IKFAST_ATAN2_MAGTHRESH);
if(!x35.valid){
continue;
}
IkReal x31=((IKasin(x30))+(((-1.0)*(x35.value))));
IkReal x32=x17;
CheckValue<IkReal> x36=IKPowWithIntegerCheck(x28,-2);
if(!x36.valid){
continue;
}
if((((1.0)+(((-2.89723856948846)*x26*(x36.value))))) < -0.00001)
continue;
IkReal x33=(x32*(IKsqrt(((1.0)+(((-2.89723856948846)*x26*(x36.value)))))));
sj1=gconst1;
cj1=gconst2;
j1=x31;
IkReal gconst0=x31;
IkReal gconst1=((((-1.0)*py*x30*x32))+((px*x33)));
IkReal gconst2=((((-1.0)*x25*x33))+(((-1.70212765957447)*x26*x29*x32)));
IkReal x37=((py*py)+(px*px));
j0eval[0]=x37;
j0eval[1]=IKsign(x37);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x38 = IKatan2WithCheck(IkReal(((((-1.0)*(2.209)*gconst1*gconst2))+(((-1.0)*(3.76)*gconst1))+(((1000.0)*px*py)))),IkReal(((-6.4)+(((1000.0)*(px*px)))+(((-1.0)*(2.209)*(gconst2*gconst2)))+(((-1.0)*(7.52)*gconst2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x38.valid){
continue;
}
CheckValue<IkReal> x39=IKPowWithIntegerCheck(IKsign(((((-1.0)*(80.0)*py))+(((-1.0)*(47.0)*gconst2*py))+(((47.0)*gconst1*px)))),-1);
if(!x39.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x38.value)+(((1.5707963267949)*(x39.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x40=((0.047)*gconst1);
IkReal x41=IKcos(j0);
IkReal x42=((1.0)*px);
IkReal x43=IKsin(j0);
IkReal x44=((1.0)*py);
IkReal x45=((0.047)*gconst2);
IkReal x46=(py*x41);
evalcond[0]=((((-1.0)*x41*x42))+(((-1.0)*x43*x44))+x40);
evalcond[1]=((-0.08)+(((-1.0)*x45))+x46+(((-1.0)*x42*x43)));
evalcond[2]=((((-0.08)*x43))+(((-1.0)*x42))+(((-1.0)*x43*x45))+((x40*x41)));
evalcond[3]=((((-1.0)*x44))+((x41*x45))+(((0.08)*x41))+((x40*x43)));
evalcond[4]=((-0.004191)+(((-1.0)*(1.0)*(py*py)))+(((-1.0)*(1.0)*(px*px)))+(((0.16)*x46))+(((-0.16)*px*x43)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x47=((0.047)*gconst1);
IkReal x48=((0.047)*gconst2);
CheckValue<IkReal> x49 = IKatan2WithCheck(IkReal(((((-1.0)*px*x48))+((py*x47))+(((-1.0)*(0.08)*px)))),IkReal(((((0.08)*py))+((py*x48))+((px*x47)))),IKFAST_ATAN2_MAGTHRESH);
if(!x49.valid){
continue;
}
CheckValue<IkReal> x50=IKPowWithIntegerCheck(IKsign(((py*py)+(px*px))),-1);
if(!x50.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x49.value)+(((1.5707963267949)*(x50.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x51=((0.047)*gconst1);
IkReal x52=IKcos(j0);
IkReal x53=((1.0)*px);
IkReal x54=IKsin(j0);
IkReal x55=((1.0)*py);
IkReal x56=((0.047)*gconst2);
IkReal x57=(py*x52);
evalcond[0]=((((-1.0)*x52*x53))+(((-1.0)*x54*x55))+x51);
evalcond[1]=((-0.08)+(((-1.0)*x56))+(((-1.0)*x53*x54))+x57);
evalcond[2]=(((x51*x52))+(((-1.0)*x54*x56))+(((-1.0)*x53))+(((-0.08)*x54)));
evalcond[3]=((((-1.0)*x55))+((x52*x56))+((x51*x54))+(((0.08)*x52)));
evalcond[4]=((-0.004191)+(((-1.0)*(1.0)*(py*py)))+(((-1.0)*(1.0)*(px*px)))+(((-0.16)*px*x54))+(((0.16)*x57)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x58=((1.0)*px);
IkReal x59=((1.0)*py);
IkReal x60=px*px;
if(((x60+(py*py))) < -0.00001)
continue;
IkReal x61=IKsqrt((x60+(py*py)));
IkReal x62=IKabs(x61);
CheckValue<IkReal> x67=IKPowWithIntegerCheck(x62,-1);
if(!x67.valid){
continue;
}
IkReal x63=x67.value;
IkReal x64=((1.70212765957447)*px*x63);
IkReal x68 = (x60+(py*py));
if(IKabs(x68)==0){
continue;
}
IkReal x65=pow(x68,-0.5);
CheckValue<IkReal> x69=IKPowWithIntegerCheck(x62,-2);
if(!x69.valid){
continue;
}
if((((1.0)+(((-2.89723856948846)*x60*(x69.value))))) < -0.00001)
continue;
IkReal x66=(x65*(IKsqrt(((1.0)+(((-2.89723856948846)*x60*(x69.value)))))));
CheckValue<IkReal> x70 = IKatan2WithCheck(IkReal(((-1.0)*x58)),IkReal(((-1.0)*x59)),IKFAST_ATAN2_MAGTHRESH);
if(!x70.valid){
continue;
}
if( (x64) < -1-IKFAST_SINCOS_THRESH || (x64) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x70.value)))+(((-1.0)*(IKasin(x64)))));
IkReal gconst4=((((-1.0)*py*x64*x65))+(((-1.0)*x58*x66)));
IkReal gconst5=((((-1.70212765957447)*x60*x63*x65))+((x59*x66)));
if((((py*py)+(px*px))) < -0.00001)
continue;
CheckValue<IkReal> x71=IKPowWithIntegerCheck(IKabs(IKsqrt(((py*py)+(px*px)))),-1);
if(!x71.valid){
continue;
}
if( (((1.70212765957447)*px*(x71.value))) < -1-IKFAST_SINCOS_THRESH || (((1.70212765957447)*px*(x71.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x72 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*px)))),IkReal(((-1.0)*(((1.0)*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x72.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1+(IKasin(((1.70212765957447)*px*(x71.value))))+(x72.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x73=((1.0)*px);
IkReal x74=((1.0)*py);
IkReal x75=px*px;
IkReal x76=x61;
IkReal x77=IKabs(x76);
CheckValue<IkReal> x83=IKPowWithIntegerCheck(x77,-1);
if(!x83.valid){
continue;
}
IkReal x78=x83.value;
IkReal x79=((1.70212765957447)*px*x78);
if( (x79) < -1-IKFAST_SINCOS_THRESH || (x79) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x84 = IKatan2WithCheck(IkReal(((-1.0)*x73)),IkReal(((-1.0)*x74)),IKFAST_ATAN2_MAGTHRESH);
if(!x84.valid){
continue;
}
IkReal x80=((((-1.0)*(IKasin(x79))))+(((-1.0)*(x84.value))));
IkReal x81=x65;
CheckValue<IkReal> x85=IKPowWithIntegerCheck(x77,-2);
if(!x85.valid){
continue;
}
if((((1.0)+(((-2.89723856948846)*x75*(x85.value))))) < -0.00001)
continue;
IkReal x82=(x81*(IKsqrt(((1.0)+(((-2.89723856948846)*x75*(x85.value)))))));
sj1=gconst4;
cj1=gconst5;
j1=((3.14159265)+x80);
IkReal gconst3=((3.14159265358979)+x80);
IkReal gconst4=((((-1.0)*x73*x82))+(((-1.0)*py*x79*x81)));
IkReal gconst5=(((x74*x82))+(((-1.70212765957447)*x75*x78*x81)));
IkReal x86=((py*py)+(px*px));
j0eval[0]=x86;
j0eval[1]=IKsign(x86);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x87=IKPowWithIntegerCheck(IKsign(((((-1.0)*(47.0)*gconst5*py))+(((-1.0)*(80.0)*py))+(((47.0)*gconst4*px)))),-1);
if(!x87.valid){
continue;
}
CheckValue<IkReal> x88 = IKatan2WithCheck(IkReal(((((-1.0)*(2.209)*gconst4*gconst5))+(((1000.0)*px*py))+(((-1.0)*(3.76)*gconst4)))),IkReal(((-6.4)+(((-1.0)*(2.209)*(gconst5*gconst5)))+(((1000.0)*(px*px)))+(((-1.0)*(7.52)*gconst5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x88.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x87.value)))+(x88.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x89=((0.047)*gconst4);
IkReal x90=IKcos(j0);
IkReal x91=((1.0)*px);
IkReal x92=IKsin(j0);
IkReal x93=((1.0)*py);
IkReal x94=((0.047)*gconst5);
IkReal x95=(py*x90);
evalcond[0]=((((-1.0)*x92*x93))+x89+(((-1.0)*x90*x91)));
evalcond[1]=((-0.08)+(((-1.0)*x94))+x95+(((-1.0)*x91*x92)));
evalcond[2]=(((x89*x90))+(((-1.0)*x91))+(((-0.08)*x92))+(((-1.0)*x92*x94)));
evalcond[3]=((((0.08)*x90))+((x89*x92))+((x90*x94))+(((-1.0)*x93)));
evalcond[4]=((-0.004191)+(((-1.0)*(1.0)*(py*py)))+(((-1.0)*(1.0)*(px*px)))+(((0.16)*x95))+(((-0.16)*px*x92)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x96=((0.047)*gconst4);
IkReal x97=((0.047)*gconst5);
CheckValue<IkReal> x98 = IKatan2WithCheck(IkReal((((py*x96))+(((-1.0)*px*x97))+(((-1.0)*(0.08)*px)))),IkReal((((px*x96))+(((0.08)*py))+((py*x97)))),IKFAST_ATAN2_MAGTHRESH);
if(!x98.valid){
continue;
}
CheckValue<IkReal> x99=IKPowWithIntegerCheck(IKsign(((py*py)+(px*px))),-1);
if(!x99.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x98.value)+(((1.5707963267949)*(x99.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x100=((0.047)*gconst4);
IkReal x101=IKcos(j0);
IkReal x102=((1.0)*px);
IkReal x103=IKsin(j0);
IkReal x104=((1.0)*py);
IkReal x105=((0.047)*gconst5);
IkReal x106=(py*x101);
evalcond[0]=(x100+(((-1.0)*x101*x102))+(((-1.0)*x103*x104)));
evalcond[1]=((-0.08)+x106+(((-1.0)*x102*x103))+(((-1.0)*x105)));
evalcond[2]=((((-1.0)*x103*x105))+((x100*x101))+(((-0.08)*x103))+(((-1.0)*x102)));
evalcond[3]=((((-1.0)*x104))+((x101*x105))+(((0.08)*x101))+((x100*x103)));
evalcond[4]=((-0.004191)+(((-1.0)*(1.0)*(py*py)))+(((-1.0)*(1.0)*(px*px)))+(((0.16)*x106))+(((-0.16)*px*x103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x107=py*py;
if(((x107+(px*px))) < -0.00001)
continue;
IkReal x108=IKsqrt((x107+(px*px)));
IkReal x109=IKabs(x108);
CheckValue<IkReal> x115=IKPowWithIntegerCheck(x109,-1);
if(!x115.valid){
continue;
}
IkReal x110=x115.value;
IkReal x111=((1.70212765957447)*py*x110);
IkReal x116 = (x107+(px*px));
if(IKabs(x116)==0){
continue;
}
IkReal x112=pow(x116,-0.5);
IkReal x113=(px*x112);
CheckValue<IkReal> x117=IKPowWithIntegerCheck(x109,-2);
if(!x117.valid){
continue;
}
if((((1.0)+(((-2.89723856948846)*x107*(x117.value))))) < -0.00001)
continue;
IkReal x114=IKsqrt(((1.0)+(((-2.89723856948846)*x107*(x117.value)))));
if( (x111) < -1-IKFAST_SINCOS_THRESH || (x111) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x118 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*py)))),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x118.valid){
continue;
}
IkReal gconst6=((IKasin(x111))+(((-1.0)*(x118.value))));
IkReal gconst7=(((py*x112*x114))+((x111*x113)));
IkReal gconst8=(((x113*x114))+(((-1.70212765957447)*x107*x110*x112)));
CheckValue<IkReal> x119 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*py)))),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x119.valid){
continue;
}
if((((py*py)+(px*px))) < -0.00001)
continue;
CheckValue<IkReal> x120=IKPowWithIntegerCheck(IKabs(IKsqrt(((py*py)+(px*px)))),-1);
if(!x120.valid){
continue;
}
if( (((1.70212765957447)*py*(x120.value))) < -1-IKFAST_SINCOS_THRESH || (((1.70212765957447)*py*(x120.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j1+(x119.value)+(((-1.0)*(1.0)*(IKasin(((1.70212765957447)*py*(x120.value)))))))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x121=py*py;
IkReal x122=x108;
IkReal x123=IKabs(x122);
CheckValue<IkReal> x130=IKPowWithIntegerCheck(x123,-1);
if(!x130.valid){
continue;
}
IkReal x124=x130.value;
IkReal x125=((1.70212765957447)*py*x124);
if( (x125) < -1-IKFAST_SINCOS_THRESH || (x125) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x131 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*py)))),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x131.valid){
continue;
}
IkReal x126=((IKasin(x125))+(((-1.0)*(x131.value))));
IkReal x127=x112;
IkReal x128=(px*x127);
CheckValue<IkReal> x132=IKPowWithIntegerCheck(x123,-2);
if(!x132.valid){
continue;
}
if((((1.0)+(((-2.89723856948846)*x121*(x132.value))))) < -0.00001)
continue;
IkReal x129=IKsqrt(((1.0)+(((-2.89723856948846)*x121*(x132.value)))));
sj1=gconst7;
cj1=gconst8;
j1=x126;
IkReal gconst6=x126;
IkReal gconst7=(((py*x127*x129))+((x125*x128)));
IkReal gconst8=(((x128*x129))+(((-1.70212765957447)*x121*x124*x127)));
IkReal x133=((py*py)+(px*px));
j0eval[0]=x133;
j0eval[1]=IKsign(x133);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x134 = IKatan2WithCheck(IkReal(((-6.4)+(((-1.0)*(2.209)*(gconst8*gconst8)))+(((1000.0)*(py*py)))+(((-1.0)*(7.52)*gconst8)))),IkReal(((((2.209)*gconst7*gconst8))+(((3.76)*gconst7))+(((1000.0)*px*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x134.valid){
continue;
}
CheckValue<IkReal> x135=IKPowWithIntegerCheck(IKsign(((((47.0)*gconst8*px))+(((80.0)*px))+(((47.0)*gconst7*py)))),-1);
if(!x135.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x134.value)+(((1.5707963267949)*(x135.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x136=((0.047)*gconst7);
IkReal x137=IKcos(j0);
IkReal x138=((1.0)*px);
IkReal x139=IKsin(j0);
IkReal x140=((1.0)*py);
IkReal x141=((0.047)*gconst8);
IkReal x142=(py*x137);
evalcond[0]=(x136+(((-1.0)*x137*x138))+(((-1.0)*x139*x140)));
evalcond[1]=((-0.08)+x142+(((-1.0)*x141))+(((-1.0)*x138*x139)));
evalcond[2]=((((-1.0)*x139*x141))+(((-0.08)*x139))+(((-1.0)*x138))+((x136*x137)));
evalcond[3]=(((x137*x141))+((x136*x139))+(((-1.0)*x140))+(((0.08)*x137)));
evalcond[4]=((-0.004191)+(((-1.0)*(1.0)*(py*py)))+(((-0.16)*px*x139))+(((0.16)*x142))+(((-1.0)*(1.0)*(px*px))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x143=((0.047)*gconst7);
IkReal x144=((0.047)*gconst8);
CheckValue<IkReal> x145 = IKatan2WithCheck(IkReal((((py*x143))+(((-1.0)*px*x144))+(((-1.0)*(0.08)*px)))),IkReal(((((0.08)*py))+((py*x144))+((px*x143)))),IKFAST_ATAN2_MAGTHRESH);
if(!x145.valid){
continue;
}
CheckValue<IkReal> x146=IKPowWithIntegerCheck(IKsign(((py*py)+(px*px))),-1);
if(!x146.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x145.value)+(((1.5707963267949)*(x146.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x147=((0.047)*gconst7);
IkReal x148=IKcos(j0);
IkReal x149=((1.0)*px);
IkReal x150=IKsin(j0);
IkReal x151=((1.0)*py);
IkReal x152=((0.047)*gconst8);
IkReal x153=(py*x148);
evalcond[0]=(x147+(((-1.0)*x150*x151))+(((-1.0)*x148*x149)));
evalcond[1]=((-0.08)+x153+(((-1.0)*x152))+(((-1.0)*x149*x150)));
evalcond[2]=((((-0.08)*x150))+(((-1.0)*x150*x152))+((x147*x148))+(((-1.0)*x149)));
evalcond[3]=((((0.08)*x148))+((x147*x150))+(((-1.0)*x151))+((x148*x152)));
evalcond[4]=((-0.004191)+(((-1.0)*(1.0)*(py*py)))+(((-0.16)*px*x150))+(((-1.0)*(1.0)*(px*px)))+(((0.16)*x153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x154=((1.0)*py);
IkReal x155=py*py;
if(((x155+(px*px))) < -0.00001)
continue;
IkReal x156=IKsqrt((x155+(px*px)));
IkReal x157=IKabs(x156);
CheckValue<IkReal> x163=IKPowWithIntegerCheck(x157,-1);
if(!x163.valid){
continue;
}
IkReal x158=x163.value;
IkReal x159=((1.70212765957447)*py*x158);
IkReal x164 = (x155+(px*px));
if(IKabs(x164)==0){
continue;
}
IkReal x160=pow(x164,-0.5);
IkReal x161=(px*x160);
CheckValue<IkReal> x165=IKPowWithIntegerCheck(x157,-2);
if(!x165.valid){
continue;
}
if((((1.0)+(((-2.89723856948846)*x155*(x165.value))))) < -0.00001)
continue;
IkReal x162=IKsqrt(((1.0)+(((-2.89723856948846)*x155*(x165.value)))));
if( (x159) < -1-IKFAST_SINCOS_THRESH || (x159) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x166 = IKatan2WithCheck(IkReal(((-1.0)*x154)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x166.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(IKasin(x159))))+(((-1.0)*(x166.value))));
IkReal gconst10=((((-1.0)*x154*x160*x162))+((x159*x161)));
IkReal gconst11=((((-1.70212765957447)*x155*x158*x160))+(((-1.0)*x161*x162)));
CheckValue<IkReal> x167 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*py)))),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x167.valid){
continue;
}
if((((py*py)+(px*px))) < -0.00001)
continue;
CheckValue<IkReal> x168=IKPowWithIntegerCheck(IKabs(IKsqrt(((py*py)+(px*px)))),-1);
if(!x168.valid){
continue;
}
if( (((1.70212765957447)*py*(x168.value))) < -1-IKFAST_SINCOS_THRESH || (((1.70212765957447)*py*(x168.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1+(x167.value)+(IKasin(((1.70212765957447)*py*(x168.value)))))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x169=((1.0)*py);
IkReal x170=py*py;
IkReal x171=x156;
IkReal x172=IKabs(x171);
CheckValue<IkReal> x179=IKPowWithIntegerCheck(x172,-1);
if(!x179.valid){
continue;
}
IkReal x173=x179.value;
IkReal x174=((1.70212765957447)*py*x173);
if( (x174) < -1-IKFAST_SINCOS_THRESH || (x174) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x180 = IKatan2WithCheck(IkReal(((-1.0)*x169)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x180.valid){
continue;
}
IkReal x175=((((-1.0)*(IKasin(x174))))+(((-1.0)*(x180.value))));
IkReal x176=x160;
IkReal x177=(px*x176);
CheckValue<IkReal> x181=IKPowWithIntegerCheck(x172,-2);
if(!x181.valid){
continue;
}
if((((1.0)+(((-2.89723856948846)*x170*(x181.value))))) < -0.00001)
continue;
IkReal x178=IKsqrt(((1.0)+(((-2.89723856948846)*x170*(x181.value)))));
sj1=gconst10;
cj1=gconst11;
j1=((3.14159265)+x175);
IkReal gconst9=((3.14159265358979)+x175);
IkReal gconst10=((((-1.0)*x169*x176*x178))+((x174*x177)));
IkReal gconst11=((((-1.70212765957447)*x170*x173*x176))+(((-1.0)*x177*x178)));
IkReal x182=((py*py)+(px*px));
j0eval[0]=x182;
j0eval[1]=IKsign(x182);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x183=IKPowWithIntegerCheck(IKsign(((((-1.0)*(47.0)*gconst11*py))+(((-1.0)*(80.0)*py))+(((47.0)*gconst10*px)))),-1);
if(!x183.valid){
continue;
}
CheckValue<IkReal> x184 = IKatan2WithCheck(IkReal(((((-1.0)*(2.209)*gconst10*gconst11))+(((-1.0)*(3.76)*gconst10))+(((1000.0)*px*py)))),IkReal(((-6.4)+(((-1.0)*(7.52)*gconst11))+(((-1.0)*(2.209)*(gconst11*gconst11)))+(((1000.0)*(px*px))))),IKFAST_ATAN2_MAGTHRESH);
if(!x184.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x183.value)))+(x184.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x185=((0.047)*gconst10);
IkReal x186=IKcos(j0);
IkReal x187=((1.0)*px);
IkReal x188=IKsin(j0);
IkReal x189=((1.0)*py);
IkReal x190=((0.047)*gconst11);
IkReal x191=(py*x186);
evalcond[0]=((((-1.0)*x186*x187))+(((-1.0)*x188*x189))+x185);
evalcond[1]=((-0.08)+(((-1.0)*x190))+(((-1.0)*x187*x188))+x191);
evalcond[2]=((((-1.0)*x188*x190))+((x185*x186))+(((-0.08)*x188))+(((-1.0)*x187)));
evalcond[3]=(((x185*x188))+(((0.08)*x186))+(((-1.0)*x189))+((x186*x190)));
evalcond[4]=((-0.004191)+(((-1.0)*(1.0)*(py*py)))+(((-1.0)*(1.0)*(px*px)))+(((-0.16)*px*x188))+(((0.16)*x191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x192=((0.047)*gconst10);
IkReal x193=((0.047)*gconst11);
CheckValue<IkReal> x194 = IKatan2WithCheck(IkReal(((((-1.0)*px*x193))+((py*x192))+(((-1.0)*(0.08)*px)))),IkReal(((((0.08)*py))+((px*x192))+((py*x193)))),IKFAST_ATAN2_MAGTHRESH);
if(!x194.valid){
continue;
}
CheckValue<IkReal> x195=IKPowWithIntegerCheck(IKsign(((py*py)+(px*px))),-1);
if(!x195.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x194.value)+(((1.5707963267949)*(x195.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x196=((0.047)*gconst10);
IkReal x197=IKcos(j0);
IkReal x198=((1.0)*px);
IkReal x199=IKsin(j0);
IkReal x200=((1.0)*py);
IkReal x201=((0.047)*gconst11);
IkReal x202=(py*x197);
evalcond[0]=((((-1.0)*x199*x200))+(((-1.0)*x197*x198))+x196);
evalcond[1]=((-0.08)+(((-1.0)*x201))+(((-1.0)*x198*x199))+x202);
evalcond[2]=((((-0.08)*x199))+(((-1.0)*x198))+((x196*x197))+(((-1.0)*x199*x201)));
evalcond[3]=(((x197*x201))+(((-1.0)*x200))+((x196*x199))+(((0.08)*x197)));
evalcond[4]=((-0.004191)+(((-1.0)*(1.0)*(py*py)))+(((-0.16)*px*x199))+(((0.16)*x202))+(((-1.0)*(1.0)*(px*px))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((py*py)+(px*px));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
py=0;
px=0;
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(px)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
px=0;
py=0;
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x203=(cj1*px);
IkReal x204=(py*sj1);
CheckValue<IkReal> x205=IKPowWithIntegerCheck(((((-47000.0)*x204))+(((-47000.0)*x203))+(((-1.0)*(80000.0)*px))),-1);
if(!x205.valid){
continue;
}
CheckValue<IkReal> x206=IKPowWithIntegerCheck(((((-1.0)*(80.0)*px))+(((-47.0)*x203))+(((-47.0)*x204))),-1);
if(!x206.valid){
continue;
}
if( IKabs(((x205.value)*(((-2209.0)+(((1000000.0)*(px*px)))+(((2209.0)*(cj1*cj1))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x206.value)*(((((-1.0)*(2.209)*cj1*sj1))+(((-1.0)*(1000.0)*px*py))+(((-1.0)*(3.76)*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x205.value)*(((-2209.0)+(((1000000.0)*(px*px)))+(((2209.0)*(cj1*cj1)))))))+IKsqr(((x206.value)*(((((-1.0)*(2.209)*cj1*sj1))+(((-1.0)*(1000.0)*px*py))+(((-1.0)*(3.76)*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x205.value)*(((-2209.0)+(((1000000.0)*(px*px)))+(((2209.0)*(cj1*cj1)))))), ((x206.value)*(((((-1.0)*(2.209)*cj1*sj1))+(((-1.0)*(1000.0)*px*py))+(((-1.0)*(3.76)*sj1))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x207=((0.047)*sj1);
IkReal x208=IKcos(j0);
IkReal x209=((1.0)*px);
IkReal x210=IKsin(j0);
IkReal x211=((1.0)*py);
IkReal x212=((0.047)*cj1);
IkReal x213=(py*x208);
evalcond[0]=(x207+(((-1.0)*x208*x209))+(((-1.0)*x210*x211)));
evalcond[1]=((-0.08)+(((-1.0)*x209*x210))+x213+(((-1.0)*x212)));
evalcond[2]=((((-1.0)*x210*x212))+(((-0.08)*x210))+((x207*x208))+(((-1.0)*x209)));
evalcond[3]=(((x208*x212))+((x207*x210))+(((0.08)*x208))+(((-1.0)*x211)));
evalcond[4]=((-0.004191)+(((-1.0)*(1.0)*(py*py)))+(((0.16)*x213))+(((-1.0)*(1.0)*(px*px)))+(((-0.16)*px*x210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x214 = IKatan2WithCheck(IkReal(((((-1.0)*(2.209)*cj1*sj1))+(((-1.0)*(3.76)*sj1))+(((1000.0)*px*py)))),IkReal(((-6.4)+(((-1.0)*(2.209)*(cj1*cj1)))+(((1000.0)*(px*px)))+(((-1.0)*(7.52)*cj1)))),IKFAST_ATAN2_MAGTHRESH);
if(!x214.valid){
continue;
}
CheckValue<IkReal> x215=IKPowWithIntegerCheck(IKsign(((((-1.0)*(47.0)*cj1*py))+(((-1.0)*(80.0)*py))+(((47.0)*px*sj1)))),-1);
if(!x215.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x214.value)+(((1.5707963267949)*(x215.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x216=((0.047)*sj1);
IkReal x217=IKcos(j0);
IkReal x218=((1.0)*px);
IkReal x219=IKsin(j0);
IkReal x220=((1.0)*py);
IkReal x221=((0.047)*cj1);
IkReal x222=(py*x217);
evalcond[0]=((((-1.0)*x219*x220))+x216+(((-1.0)*x217*x218)));
evalcond[1]=((-0.08)+(((-1.0)*x221))+(((-1.0)*x218*x219))+x222);
evalcond[2]=(((x216*x217))+(((-0.08)*x219))+(((-1.0)*x218))+(((-1.0)*x219*x221)));
evalcond[3]=(((x217*x221))+(((-1.0)*x220))+((x216*x219))+(((0.08)*x217)));
evalcond[4]=((-0.004191)+(((-1.0)*(1.0)*(py*py)))+(((-0.16)*px*x219))+(((-1.0)*(1.0)*(px*px)))+(((0.16)*x222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x223=((0.047)*cj1);
IkReal x224=((0.047)*sj1);
CheckValue<IkReal> x225 = IKatan2WithCheck(IkReal(((((-1.0)*px*x223))+((py*x224))+(((-1.0)*(0.08)*px)))),IkReal((((px*x224))+(((0.08)*py))+((py*x223)))),IKFAST_ATAN2_MAGTHRESH);
if(!x225.valid){
continue;
}
CheckValue<IkReal> x226=IKPowWithIntegerCheck(IKsign(((py*py)+(px*px))),-1);
if(!x226.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x225.value)+(((1.5707963267949)*(x226.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x227=((0.047)*sj1);
IkReal x228=IKcos(j0);
IkReal x229=((1.0)*px);
IkReal x230=IKsin(j0);
IkReal x231=((1.0)*py);
IkReal x232=((0.047)*cj1);
IkReal x233=(py*x228);
evalcond[0]=((((-1.0)*x228*x229))+(((-1.0)*x230*x231))+x227);
evalcond[1]=((-0.08)+(((-1.0)*x232))+(((-1.0)*x229*x230))+x233);
evalcond[2]=((((-0.08)*x230))+(((-1.0)*x230*x232))+(((-1.0)*x229))+((x227*x228)));
evalcond[3]=((((-1.0)*x231))+(((0.08)*x228))+((x228*x232))+((x227*x230)));
evalcond[4]=((-0.004191)+(((-1.0)*(1.0)*(py*py)))+(((-1.0)*(1.0)*(px*px)))+(((0.16)*x233))+(((-0.16)*px*x230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(2);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - scara_cpe (92f4655a4635163f2d3b4fa8546c03df)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
